@using Luciarr.WebApi.Models.Sonarr
@using Luciarr.WebApi.Controllers
@using Microsoft.AspNetCore.Mvc;
@using Luciarr.Web.Data
@using Microsoft.Extensions.Options

@inject SonarrController _sonarrController
@inject IOptionsSnapshot<SonarrSettings> _sonarrSettingsSnapshot
@inject SqliteDbContext _context

@if (showAlert)
{
    <Alert Color="@alertColor">
        <Icon Name="@alertIconName" class="me-2"></Icon> @alertMessage
        @if (responseMessages.Any())
        {
            <hr />
            @foreach(var message in responseMessages)
            {
                <p>@message</p>
            }
        }
    </Alert>
}
Overall
<div class="progress" role="progressbar">
    <div class="progress-bar bg-warning text-dark @SeriesClasses" style="width: @SeriesDownloadPercent">@SeriesDownloadPercent</div>
</div>

@foreach (var season in Series.Seasons.Where(x => x.SeasonNumber != 0).OrderBy(x => x.SeasonNumber))
{
    var barColor = season.Statistics.PercentOfEpisodes != 100 ? "bg-primary" : "bg-success";
    var seasonPercent = Math.Round(season.Statistics.PercentOfEpisodes) + "%";
    var seasonText = $"Season {season.SeasonNumber}";
    var finishedClass = season.Statistics.PercentOfEpisodes != 100 ? "progress-bar-striped progress-bar-animated" : "progress-bar-striped";

    <div class="mt-2">@seasonText</div>
    <div class="progress" role="progressbar">
        <div class="progress-bar @barColor @finishedClass" style="width: @seasonPercent">@seasonPercent</div>
    </div>
}
<hr/>
<div class="mt-2">
    @if (!isIgnored)
    {
        <Button @onclick="OnRefresh" Color="ButtonColor.Primary" Disabled="@actionLoading" Class="me-1">
            @if (refreshing)
            {
                <Spinner Size="SpinnerSize.Small" Type="SpinnerType.Dots"/>
            } 
            else
            {
                <div>Hide</div>
            }
        </Button>
    }
    <Button @onclick="OnUnhide" Color="ButtonColor.Primary" Disabled="@actionLoading">
        @if (unhiding)
        {
            <Spinner Size="SpinnerSize.Small" Type="SpinnerType.Dots" />
        }
        else
        {
            <div>Unhide</div>
        }
    </Button>
    <Button @onclick="OnIgnored" Color="@ignoredColor" Class="float-end" Disabled="@ignoring">
        @if (ignoring)
        {
            <Spinner Size="SpinnerSize.Small" Type="SpinnerType.Dots" />
        }
        else
        {
            <div>@ignoredText</div>
        }
    </Button>
</div>

@code {
    [Parameter]
    public SonarrSeries Series { get; set; }

    public SonarrSettings _sonarrSettings => _sonarrSettingsSnapshot.Value;

    public string SeriesDownloadPercent => Math.Round(Series.Statistics.PercentOfEpisodes) + "%";
    public string SeriesBarColor => Series.Statistics.PercentOfEpisodes != 100 ? "bg-primary" : "bg-success";
    public string SeriesClasses => Series.Statistics.PercentOfEpisodes != 100 ? "progress-bar-striped progress-bar-animated" : "progress-bar-striped";

    bool showAlert = false;
    AlertColor alertColor = AlertColor.Success;
    IconName alertIconName = IconName.CheckCircleFill;
    string alertMessage = "";
    List<string> responseMessages = new List<string>();

    public bool refreshing = false;
    public bool unhiding = false;
    public bool actionLoading => refreshing || unhiding;

    public bool ignoring = false;
    public bool isIgnored => _sonarrSettings.IgnoreTvdbIds.Contains(Series.TvdbId);
    public ButtonColor ignoredColor => isIgnored ? ButtonColor.Danger : ButtonColor.Success;
    public string ignoredText => isIgnored ? "Manual" : "Automatic";


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task OnRefresh()
    {
        showAlert = false;
        refreshing = true;

        var response = await _sonarrController.PostDownloadWebhook(new SonarrController.WebhookDownloadPayload()
        {
            EventType = "Download",
            Series = new SonarrController.WebhookSeries()
            {
                TvdbId = Series.TvdbId,
                Title = Series.Title,
                Year = Series.Year
            },
            Episodes = new List<SonarrController.WebhookEpisode>
            {
                new SonarrController.WebhookEpisode()
                {
                    SeasonNumber = 0,
                    EpisodeNumber = 0
                }
            }
        });

        if (response.Result is ObjectResult objectResult && objectResult.Value is SonarrController.MessageResult messageResult)
        {
            responseMessages = messageResult.Messages;
        }

        if (response.Result is OkObjectResult)
        {
            if (responseMessages.Any())
            {
                alertColor = AlertColor.Success;
                alertIconName = IconName.CheckCircleFill;
                alertMessage = "Hiding Success!";
            } 
            else
            {
                alertColor = AlertColor.Info;
                alertIconName = IconName.InfoCircleFill;
                alertMessage = "No action needed!";
            }
        } 
        else
        {
            alertColor = AlertColor.Danger;
            alertIconName = IconName.ExclamationTriangleFill;
            alertMessage = "Something went wrong!";
        }

        showAlert = true;
        refreshing = false;
    }

    private async Task OnUnhide()
    {
        showAlert = false;
        unhiding = true;
        var response = await _sonarrController.PostUnhideRequest(new SonarrController.UnhideRequest() { TvdbId = Series.TvdbId });

        if (response.Result is ObjectResult objectResult && objectResult.Value is SonarrController.MessageResult messageResult)
        {
            responseMessages = messageResult.Messages;
        }

        if (response.Result is OkObjectResult)
        {
            if (responseMessages.Any())
            {
                alertColor = AlertColor.Success;
                alertIconName = IconName.CheckCircleFill;
                alertMessage = "Unhiding Success!";
            }
            else
            {
                alertColor = AlertColor.Info;
                alertIconName = IconName.InfoCircleFill;
                alertMessage = "No action needed!";
            }
        }
        else
        {
            alertColor = AlertColor.Danger;
            alertIconName = IconName.ExclamationTriangleFill;
            alertMessage = "Something went wrong!";
        }

        showAlert = true;
        unhiding = false;
    }

    public async Task OnIgnored()
    {
        showAlert = false;
        ignoring = true;
        try
        {
            if (isIgnored)
            {
                _sonarrSettings.IgnoreTvdbIds.Remove(Series.TvdbId);
            }
            else
            {
                _sonarrSettings.IgnoreTvdbIds.Add(Series.TvdbId);
            }

            UpdateSettingList("SonarrSettings:IgnoreTvdbIds", _sonarrSettings.IgnoreTvdbIds);

            await _context.SaveChangesAsync();
        } 
        catch (Exception e)
        {
            alertColor = AlertColor.Danger;
            alertIconName = IconName.ExclamationTriangleFill;
            alertMessage = "Something went wrong!";
            responseMessages = new List<string>() { e.Message };
            showAlert = true;
        }
        finally
        {
            ignoring = false;
        }
    }

    private void UpdateSettingList<T>(string settingName, List<T> values)
    {
        foreach (var oldSettings in _context.ConfigSettings.Where(x => x.Id.StartsWith(settingName + ":")))
        {
            _context.ConfigSettings.Remove(oldSettings);
        }

        for (int i = 0; i < values.Count; i++)
        {
            _context.ConfigSettings.Add(new ConfigSetting($"{settingName}:{i}", values[i]?.ToString()));
        }
    }
}
