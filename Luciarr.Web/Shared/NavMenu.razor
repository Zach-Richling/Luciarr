@using System.Reflection;

@inject NavigationManager navManager

<nav class="navbar navbar-expand-md navbar-dark bg-dark-subtle position-relative">
    <a class="navbar-brand px-3" href="">
        Luciarr 
        <span class="badge text-bg-success">@version</span>
    </a>
    <ul class="navbar-nav nav-pills mr-auto">
        <NavLink class="nav-item nav-link px-3" href="series">
            <Icon Name="IconName.PlayCircle" class="me-2"></Icon> Series
        </NavLink>
        <NavLink class="nav-item nav-link px-3" href="movies">
            <Icon Name="IconName.Film" class="me-2"></Icon> Movies
        </NavLink>
        <NavLink class="nav-item nav-link px-3" href="logs">
            <Icon Name="IconName.Clipboard" class="me-2"></Icon> Logs
        </NavLink>
        <NavLink class="nav-item nav-link px-3" href="settings">
            <Icon Name="IconName.Gear" class="me-2"></Icon> Settings
        </NavLink>
    </ul>
    @if (url == "movies")
    {
        <img src="tmdb.svg" class="position-absolute end-0 me-2" style="width:50px" />
    }
</nav>

@code {
    private string version = "v" + (Assembly.GetEntryAssembly()
        ?.GetCustomAttribute<AssemblyInformationalVersionAttribute>()
        ?.InformationalVersion
        ?.Split("+")
        .First() ?? "?");

    public string url => navManager.ToBaseRelativePath(navManager.Uri);

    protected override async Task OnInitializedAsync()
    {
        navManager.LocationChanged += OnPageChange;
        await Task.CompletedTask;
    }

    private void OnPageChange(object? sender, LocationChangedEventArgs args) => StateHasChanged();
}